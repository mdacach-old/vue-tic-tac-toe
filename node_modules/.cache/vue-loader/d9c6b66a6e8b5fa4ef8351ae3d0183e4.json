{"remainingRequest":"/home/matheus/development/webdev/tic-tac-toe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/development/webdev/tic-tac-toe/src/components/Cells.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/matheus/development/webdev/tic-tac-toe/src/components/Cells.vue","mtime":1583447381774},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDZWxsIGZyb20gIi4vQ2VsbCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkNlbGxzIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8gZ3JpZCBoYXMgMTAgZWx0cyBmb3Igd2UgdG8gb3JkZXIgZnJvbSAxIHRvIDkKICAgICAgZ3JpZDogWyJudWxsIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIiwgIiIsICIiLCAiIl0sCiAgICAgIGNlbGxzTWFya2VkOiAwCiAgICB9OwogIH0sCiAgY29tcG9uZW50czogewogICAgQ2VsbAogIH0sCiAgcHJvcHM6IFsiY2VsbHMiLCAidHVybiIsICJnYW1lT3ZlciJdLAoKICBtZXRob2RzOiB7CiAgICBlcXVhbHMzKGJvYXJkLCBtYXJrZXIpIHsKICAgICAgcmV0dXJuIGJvYXJkLmV2ZXJ5KGlkID0+IHRoaXMuZ3JpZFtpZF0gPT09IG1hcmtlcik7CiAgICB9LAogICAgaXNHYW1lT3ZlcigpIHsKICAgICAgY29uc3Qgd2lubmluZ0JvYXJkcyA9IFsKICAgICAgICBbMSwgMiwgM10sCiAgICAgICAgWzQsIDUsIDZdLAogICAgICAgIFs3LCA4LCA5XSwKICAgICAgICBbMSwgNCwgN10sCiAgICAgICAgWzIsIDUsIDhdLAogICAgICAgIFszLCA2LCA5XSwKICAgICAgICBbMSwgNSwgOV0sCiAgICAgICAgWzMsIDUsIDddCiAgICAgIF07CgogICAgICBmb3IgKGxldCBib2FyZCBvZiB3aW5uaW5nQm9hcmRzKSB7CiAgICAgICAgaWYgKHRoaXMuZXF1YWxzMyhib2FyZCwgIngiKSkgewogICAgICAgICAgbGV0IHdpbm5lciA9ICJ4IjsKICAgICAgICAgIHRoaXMuJGVtaXQoImdhbWVPdmVyIiwgd2lubmVyKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZXF1YWxzMyhib2FyZCwgIm8iKSkgewogICAgICAgICAgbGV0IHdpbm5lciA9ICJvIjsKICAgICAgICAgIHRoaXMuJGVtaXQoImdhbWVPdmVyIiwgd2lubmVyKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHRoaXMuY2VsbHNNYXJrZWQgPT09IDkpIHsKICAgICAgICB0aGlzLiRlbWl0KCJnYW1lT3ZlciIsICJkcmF3Iik7CiAgICAgIH0KICAgIH0sCiAgICBtYXJrR3JpZChpZCkgewogICAgICB0aGlzLmdyaWRbaWRdID0gdGhpcy50dXJuOwogICAgfSwKICAgIHNob3dHcmlkKCkgewogICAgICBjb25zb2xlLmxvZyh0aGlzLmdyaWQpOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["Cells.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Cells.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\">\n      <Cell\n        :gameOver=\"gameOver\"\n        :turn=\"turn\"\n        :cell=\"cell\"\n        @marked=\"$emit('marked', cell.id); markGrid(cell.id); cellsMarked++; isGameOver(); \"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"./Cell\";\n\nexport default {\n  name: \"Cells\",\n  data() {\n    return {\n      // grid has 10 elts for we to order from 1 to 9\n      grid: [\"null\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      cellsMarked: 0\n    };\n  },\n  components: {\n    Cell\n  },\n  props: [\"cells\", \"turn\", \"gameOver\"],\n\n  methods: {\n    equals3(board, marker) {\n      return board.every(id => this.grid[id] === marker);\n    },\n    isGameOver() {\n      const winningBoards = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9],\n        [1, 5, 9],\n        [3, 5, 7]\n      ];\n\n      for (let board of winningBoards) {\n        if (this.equals3(board, \"x\")) {\n          let winner = \"x\";\n          this.$emit(\"gameOver\", winner);\n          return;\n        } else if (this.equals3(board, \"o\")) {\n          let winner = \"o\";\n          this.$emit(\"gameOver\", winner);\n          return;\n        }\n      }\n      if (this.cellsMarked === 9) {\n        this.$emit(\"gameOver\", \"draw\");\n      }\n    },\n    markGrid(id) {\n      this.grid[id] = this.turn;\n    },\n    showGrid() {\n      console.log(this.grid);\n    }\n  }\n};\n</script>\n\n<style>\n#container {\n  width: 50vw;\n  height: 50vw;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n}\n</style>"]}]}