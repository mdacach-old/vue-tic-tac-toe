{"remainingRequest":"/home/matheus/development/webdev/tic-tac-toe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/matheus/development/webdev/tic-tac-toe/src/components/Cells.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/matheus/development/webdev/tic-tac-toe/src/components/Cells.vue","mtime":1583447381774},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/matheus/development/webdev/tic-tac-toe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NvbnRhaW5lciB7CiAgd2lkdGg6IDUwdnc7CiAgaGVpZ2h0OiA1MHZ3OwogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTsKICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLCAxZnIpOwp9Cg=="},{"version":3,"sources":["Cells.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Cells.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\">\n      <Cell\n        :gameOver=\"gameOver\"\n        :turn=\"turn\"\n        :cell=\"cell\"\n        @marked=\"$emit('marked', cell.id); markGrid(cell.id); cellsMarked++; isGameOver(); \"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"./Cell\";\n\nexport default {\n  name: \"Cells\",\n  data() {\n    return {\n      // grid has 10 elts for we to order from 1 to 9\n      grid: [\"null\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      cellsMarked: 0\n    };\n  },\n  components: {\n    Cell\n  },\n  props: [\"cells\", \"turn\", \"gameOver\"],\n\n  methods: {\n    equals3(board, marker) {\n      return board.every(id => this.grid[id] === marker);\n    },\n    isGameOver() {\n      const winningBoards = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9],\n        [1, 5, 9],\n        [3, 5, 7]\n      ];\n\n      for (let board of winningBoards) {\n        if (this.equals3(board, \"x\")) {\n          let winner = \"x\";\n          this.$emit(\"gameOver\", winner);\n          return;\n        } else if (this.equals3(board, \"o\")) {\n          let winner = \"o\";\n          this.$emit(\"gameOver\", winner);\n          return;\n        }\n      }\n      if (this.cellsMarked === 9) {\n        this.$emit(\"gameOver\", \"draw\");\n      }\n    },\n    markGrid(id) {\n      this.grid[id] = this.turn;\n    },\n    showGrid() {\n      console.log(this.grid);\n    }\n  }\n};\n</script>\n\n<style>\n#container {\n  width: 50vw;\n  height: 50vw;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n}\n</style>"]}]}